## <file> bot.py (First connecting to api/catching errors/catching messages)


import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from handler import Debug, Handler

db = Debug('main')

def server():
    bot_session = vk_api.VkApi(token = '9cda2485cc311a9de96a60797b9d4c35c3eea2be9cb2559244f69e11cdb7ccecebf399242b47d9f92f6ba')
    vk = bot_session.get_api()

    while True:
        try:
            longpoll = VkBotLongPoll(bot_session, 187703257)
            db.msg('STARTED')
            for event in longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    if event.obj.message['from_id'] > 0:
                        if 'reply_message' in event.obj.message:
                            handler = Handler(event.obj.message['peer_id'], vk.users.get(user_ids = event.obj.message['from_id'], fields = ['sex'])[0], event.obj.message['reply_message'])
                            handler.drop(event.obj.message['text'])
                        else:
                            handler = Handler(event.obj.message['peer_id'], vk.users.get(user_ids = event.obj.message['from_id'], fields = ['sex'])[0], False)
                            handler.drop(event.obj.message['text'])
        except Exception as e:
            db.msg(f'ERR: {e}')

if __name__ == '__main__':
    server()


## <file> methods.py (Methods to use/side API's)


import pyowm, wikipedia, json, vk_api, re
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
wikipedia.set_lang('ru')
owm = pyowm.OWM(API_key = 'a907b822f169f2d235e52a52d63949b8', language = 'ru')
observe, weather = None, None
bot_session = vk_api.VkApi(token = '9cda2485cc311a9de96a60797b9d4c35c3eea2be9cb2559244f69e11cdb7ccecebf399242b47d9f92f6ba')
vk = bot_session.get_api()
ranks = [['Starter –ù—å—é—Ñ–∞–≥', 0], ['Starter –ü–µ—Ç—É—Ö', 5], ['Starter –ë–æ–µ—Ü', 10], ['Starter –†–æ–∑–±–æ–π–Ω–∏–∫', 15], ['Starter –ì–∞—á–∏-–±–æ–µ—Ü', 20], ['Medium –¢–∞—Ç–∞—Ä', 30], ['Medium –£–∑–±–µ–∫', 40], ['Medium –°–∞–º—É—Ä–∞–π', 50], ['Medium –õ–∞—Ç–µ–∫—Å-–±–æ–π', 60], ['High –¢—É—Ä–Ω–∏–∫-–º–µ–Ω', 80], ['High –ö–∞—Ä–∞—Ç–∏—Å—Ç', 100], ['High –°–µ–Ω—Å–µ–π', 120], ['High –°—Ç–∞–Ω–¥-—é–∑–µ—Ä', 140], ['Insane –î–∂–æ–∫–µ—Ä', 180], ['Insane –ö—É–∫–æ–ª–¥', 220], ['Insane –ê–¥–º–∏–Ω', 260], ['Insane –¢–≤–æ—è –ú–∞–º–∫–∞', 300], ['Mythical –í–∞–º–ø–∏—Ä', 380], ['Mythical –ò–Ω—Ñ–µ—Ä–Ω–∞–ª', 460], ['Mythical –¢–∏—Ç–∞–Ω', 540], ['Mythical –•—Ä–∞–Ω–∏—Ç–µ–ª—å', 620], ['Master –ü—É—Ç–∏–Ω', 780], ['Master –ì–µ–Ω–æ—Å', 940], ['Master –í–∞–Ω–ø–∞–Ω—á–º–µ–Ω', 1100], ['Master –ë–æ–≥', 1260]]
def get_weather(place):
    try:
        observe = owm.weather_at_place(place)
        weather = observe.get_weather()
        weather_temperature = weather.get_temperature('celsius')
        weather_details = weather.get_detailed_status()
        weather_details = weather_details[0].upper() + weather_details[1:]
        return [weather_temperature, weather_details]
    except Exception:
        pass
def get_wiki(txt):
    try:
        return wikipedia.summary(txt, sentences = 5)
    except Exception:
        pass
def send(user_id = None, chat_id = None, peer_id = None, message = None, attachment = None):
    vk.messages.send(
        user_id = user_id,
        chat_id = chat_id,
        peer_id = peer_id,
        message = message,
        attachment = attachment,
        random_id = 0
    )
def has_in(list_, v):
    for i in range(len(list_)):
        if list_[i] in v:
            return True
def charcount(c, s):
    count = 0
    for i in range(len(s)):
        if s[i] == c:
            count += 1
    return count
def openjson(f):
    return json.loads(open(f).read())
def rewritejson(f, d):
    open(f, 'w').write(d)
def replace_nicknames(a):
    s = a
    r = ''
    nicknames = openjson('nicknames.json')
    for i in range(len(s)):
        if s[i] == '[':
            for j in range(i + 1, len(s)):
                if s[j] != '|':
                    r += s[j]
                else:
                    break
            if r[2:] not in nicknames and r[4:] not in nicknames:
                if 'id' in r:
                    name = vk.users.get(user_ids = r[2:])[0]['first_name']
                    nicknames[r[2:]] = name
                elif 'club' in r:
                    name = vk.groups.getById(group_ids = r[4:])[0]['name']
                    nicknames[r[4:]] = name
                rewritejson('nicknames.json', str(nicknames).replace("'", '"'))
                r = ''
            r = ''
    for k, v in nicknames.items():
        try:
            if s.index(k) != -1:
                for i in range(s.index(k) + len(k) + 1, len(s)):
                    if s[i] != ']':
                        r += s[i]
                    else:
                        break
            s = s.replace(f'[id{k}|{r}]', f'[id{k}|{v}]')
            r = ''
        except Exception as e:
            pass
    return s
def id_from_mention(a):
    if '[club' in a:
        return ''
    s = ''
    for i in range(len(a)):
        if a[i] == 'd':
            for j in range(i + 1, len(a)):
                if a[j] != '|':
                    s += a[j]
                else:
                    break
        if a[i] == '|':
            break
    return s
def del_comma_spaces(a):
    s = a
    for i in range(len(s)):
        try:
            if s[i] == ' ' and (s[i + 1] == ',' or s[i - 1] == ','):
                s2 = list(s)
                s2[i] = '¬¢'
                s = ''.join(str(e) for e in s2)
        except Exception as e:
            pass
    if s[len(s) - 1] == ' ':
        s2 = list(s)
        s2[len(s) - 1] = '¬¢'
        s = ''.join(str(e) for e in s2)
    s = s.replace('¬¢', '')
    return s
def del_mentions(a):
    s = ''
    inm = False
    for i in range(len(a)):
        if a[i] == '[':
            inm = True
        if a[i] == ']':
            inm = False
        else:
            if not inm:
                s += a[i]
    return s
def catch_mentions(a):
    s = []
    inm = False
    for i in range(len(a)):
        if a[i] == '[' and (a[i+1:i+3] == 'id' or a[i+1:i+5] == 'club'):
            nm = ''
            for j in range(i, len(a)):
                if a[j] == ']':
                    nm += a[j]
                    break
                nm += a[j]
            s.append(nm)
    return s
def isint(s):
    try: 
        int(s)
        return True
    except ValueError:
        return False
def inkeys(d, val):
    for k, v in d.items():
        if v == val:
            return True
    return False
def update_words(t):
    dictionary = openjson('words.json')
    msgwords = re.sub('([^A-Za-z–ê-–Ø–∞-—è —ë])', '', del_mentions(t.lower())).replace(',', '').replace('.', '').split(' ')
    for i in range(len(msgwords)):
        if msgwords[i] not in dictionary['list'] and len(msgwords[i]) <= 30:
            dictionary['list'].append(msgwords[i])
    rewritejson('words.json', str(dictionary).replace("'", '"'))
def process_message(t, c):
    iscommand = False
    if t[:26] == '[club187703257|@botwaifu] ':
        t = c + t[26:]
        iscommand = True
    if t[:6].lower() == c:
        iscommand = True
    nicknames = openjson('nicknames.json')
    mentions = catch_mentions(t)
    for i in range(len(mentions)):
        mentions[i] = replace_nicknames(mentions[i])
    return {'processed': replace_nicknames(t), 'mentions': mentions, 'iscommand': iscommand}
def process_command(t):
    t = t[6:]
    print(t)
    cmd, arg = t.split(' ', 1)[0], None
    if len(t.split(' ', 1)) > 1:
        arg = t.split(' ', 1)[1]
    return {'cmd': cmd, 'arg': arg}


## <file> handler.py (Message handler/sender)


import vk_api, datetime
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from methods import *
from random import randint, choice

bot_session = vk_api.VkApi(token = '9cda2485cc311a9de96a60797b9d4c35c3eea2be9cb2559244f69e11cdb7ccecebf399242b47d9f92f6ba')
vk = bot_session.get_api()

class Debug:
    def __init__(self, label):
        self.trace_c = 0
        self.trace_p = []
        self.label = label
    def msg(self, x):
        print('[{}] ({}) {}'.format(self.label, self.trace_c, x))
        self.trace_p.append(x)
        self.trace_c += 1

db = Debug('handler')

class Handler:
    def __init__(self, receiver, user, rep):
        self.catching = [['–∏–¥–∏ –Ω–∞—Ö—É–π', '–Ω–∞—Ö—É–π –∏–¥–∏', '–ø–æ—à—ë–ª –Ω–∞—Ö—É–π', '–Ω–∞—Ö—É–π –ø–æ—à—ë–ª'], ['–ø—Ä–æ—Å—Ç–∏', '–∏–∑–≤–∏–Ω–∏', 'sorry', '—Å–æ—Ä—è–Ω', '—Å–æ—Ä—Ä–∏', '–∏–∑–≤–∏–Ω–∏—Ç–µ'], ['—Å–æ—Å–∏', '—Å–æ—Å–∞—Ç—å', '—Å–∞—Å–∞—Ç—å', '—Å–æ—Å–∞—Ç–±', '—Å–∞—Å–∞—Ç–±', '—Å–∞—Å–∏'], ['–≥–µ–π', '–≥–µ–∏']]
        self.receiver = receiver
        self.user = user
        self.sex = self.user['sex']
        self.id = self.user['id']
        self.rep = rep
        self.comma = '–≤–∞–π—Ñ—É '
    def drop(self, msg):
        if len(msg) > 0:
            msg = process_message(msg, self.comma)
            msg_text = msg['processed']
            mentions = msg['mentions']
            name = replace_nicknames(f'[id{self.id}|user]')
            if msg['iscommand']:
                call = process_command(msg_text)
                cmd = call['cmd']
                arg = call['arg']
                # <command> –ø–æ–≥–æ–¥–∞
                if cmd.lower() == '–ø–æ–≥–æ–¥–∞':
                    weather = get_weather(arg)
                    if weather == None:
                        send(peer_id = self.receiver, message = f'{name}, –ø–æ –≥–æ—Ä–æ–¥—É "{arg}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòì')
                    else:
                        send(peer_id = self.receiver, message = f'{name}, –ø–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {arg} ‚òÅ: {weather[0]["temp"]}¬∞C, {weather[1]}. ')
                # <command> –≤–∏–∫–∏
                elif cmd.lower() == '–≤–∏–∫–∏':
                    answer = get_wiki(arg)
                    if answer == None:
                        send(peer_id = self.receiver, message = f'{name}, –ø–æ –∑–∞–ø—Ä–æ—Å—É "{arg}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòì')
                    else:
                        send(peer_id = self.receiver, message = f'{name}, –≤–æ—Ç —á—Ç–æ —è –Ω–∞—à–ª–∞: {answer}')
                # <command> –±–æ–π
                elif cmd.lower() == '–±–æ–π':
                    intros = [
                        '{}: –≠–π, {}, –±—Ä–æ—Å–∞–π —Å–≤–æ–∏ –¥–µ–ª–∞ –∏ —Å—Ä–∞–∑–∏—Å—å —Å–æ –º–Ω–æ–π –≤ —ç–ø–∏—á–Ω–æ–º –ø–æ–µ–¥–∏–Ω–∫–µ! ',
                        '{}: –≠–π —Ç—ã, {}, –¥—É–º–∞–µ—à—å —Å–∏–ª—å–Ω–µ–µ –º–µ–Ω—è? –î–∞–≤–∞–π —Å—Ä–∞–∑–∏–º—Å—è! ',
                        '{}: –°—Ä–∞–∑—É –∂–µ –∞—Ç–∞–∫—É–µ—Ç –±–æ–π—Ü–∞ {}! ',
                    ]
                    duels = [
                        '–û–Ω–∏ –≤—ã–±—Ä–∞–ª–∏ –±–æ–π –≤ —Ä—É–∫–æ–ø–∞—à–∫—É, –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –ø–æ–∫–∞–∂–µ—Ç –∫—Ç–æ —Ç—É—Ç —Å–µ–Ω—Å–µ–π! ',
                        '–û–Ω–∏ –≤—ã–±—Ä–∞–ª–∏ –±–æ–π —Ñ–ª–µ–∫—Å–æ–º, –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –ø–æ–∫–∞–∂–µ—Ç –∫—Ç–æ —Ç—É—Ç –≤–µ–ª–∏–∫–∏–π —Ñ–ª–µ–∫—Å–µ—Ä! ',
                        '–û–Ω–∏ –≤—ã–±—Ä–∞–ª–∏ –±–æ–π –Ω–∞ –º–µ—á–∞—Ö, –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –ø–æ–∫–∞–∂–µ—Ç –∫—Ç–æ —Ç—É—Ç –º–∞—Å—Ç–µ—Ä —Ñ–µ—Ö—Ç–æ–≤–∞–Ω–∏—è! '
                    ]
                    endings = [
                        '–í –±–∏—Ç–≤–µ –±–æ–µ–≤—ã—Ö –∏—Å–∫—É—Å—Å—Ç–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤—ã—Ö–æ–¥–∏—Ç {}, –±–æ–µ—Ü {} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –Ω–æ–∫–∞—É—Ç!',
                        '–í –±–∏—Ç–≤–µ —Ñ–ª–µ–∫—Å–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤—ã—Ö–æ–¥–∏—Ç {}, –±–æ–µ—Ü {} –±—ã–ª —Å–Ω–µ—Å–µ–Ω —Å –Ω–æ–≥ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º —Ñ–ª–µ–∫—Å–æ–º!',
                        '–í –±–∏—Ç–≤–µ –Ω–∞ –º–µ—á–∞—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤—ã—Ö–æ–¥–∏—Ç {}, –±–æ–π—Ü–∞ {} —Ä–µ—à–∏–ª–∏ –≥–æ–ª–æ–≤—ã!'
                    ]
                    mention = None
                    if not self.rep:
                        if arg != None:
                            if len(mentions) > 0:
                                mention = mentions[0]
                    else:
                        rep_id = self.rep['from_id']
                        mention = replace_nicknames(f'[id{rep_id}|user]')
                    if mention != None:
                        if name == mention:
                            send(peer_id = self.receiver, message = f'{name}, —è –¥—É–º–∞—é —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –∑–∞–≤–µ—Å—Ç–∏ –¥—Ä—É–∑–µ–π üòì')
                        else:
                            ratings = openjson('ratings.json')
                            your_id = str(self.id)
                            mention_id = id_from_mention(mention)
                            if your_id not in ratings:
                                ratings[your_id] = {"wins": 0, "rank": ["Starter –ù—å—é—Ñ–∞–≥", 1]}
                                your_rating = 0
                            else:
                                your_rating = ratings[your_id]['wins']
                            if mention_id not in ratings:
                                ratings[mention_id] = {"wins": 0, "rank": ["Starter –ù—å—é—Ñ–∞–≥", 1]}
                                mention_rating = 0
                            else:
                                mention_rating = ratings[mention_id]['wins']
                            x = randint(0, 2)
                            intro, duel, ending, addrates = choice(intros).format(name, mention), duels[x], endings[x], '\n\n{}: {}(+1)\n{}: {}(+0)'
                            winner = choice([name, mention])
                            if winner == mention:
                                winner_id = mention_id
                                loser = name
                                loser_id = your_id
                            else:
                                winner_id = your_id
                                loser = mention
                                loser_id = mention_id
                            ratings[winner_id]['wins'] += 1
                            for i in range(1, len(ranks) + 1):
                                if ratings[winner_id]['wins'] >= ranks[i - 1][1] and i > ratings[winner_id]['rank'][1]:
                                    ratings[winner_id]['rank'][0] = ranks[i - 1][0]
                                    ratings[winner_id]['rank'][1] += 1
                                    break
                            ending = ending.format(winner, loser)
                            addrates = addrates.format(winner, ratings[winner_id]['wins'], loser, ratings[loser_id]['wins'])
                            rewritejson('ratings.json', str(ratings).replace("'", '"'))
                            send(peer_id = self.receiver, message = intro + duel + ending + addrates)
                # <command> –∏–º—è
                elif cmd.lower() == '–∏–º—è':
                    if arg != None:
                        new_name = arg.replace("'", '').replace('"', '').replace(',', '')
                        if new_name == '':
                            send(peer_id = self.receiver, message = f'{name}, –ø–æ–ø—Ä–æ–±—É–π –∏–º—è –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö.')
                        else:
                            new = openjson('nicknames.json')
                            if inkeys(new, new_name):
                                send(peer_id = self.receiver, message = f'{name}, —Ç–∞–∫–æ–µ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ üòì')
                            else:
                                new[str(self.user['id'])] = arg.replace("'", '').replace('"', '')
                                rewritejson('nicknames.json', str(new).replace("'", '"'))
                                send(peer_id = self.receiver, message = f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è [id{self.id}|{arg}]!')
                # <command> —Ä—É–ª–µ—Ç–∫–∞
                elif cmd.lower() == '—Ä—É–ª–µ—Ç–∫–∞':
                    if arg != None:
                        nums = arg.split(' ', 1)
                        if len(nums) == 2:
                            if isint(nums[0]) and isint(nums[1]):
                                send(peer_id = self.receiver, message = f'{name}, —Ä—É–ª–µ—Ç–∫–∞ –≤—ã–¥–∞–ª–∞ {randint(int(nums[0]), int(nums[1]))}!')
                # <command> —à–∞—Ä
                elif cmd.lower() == '—à–∞—Ä':
                    if arg == None:
                        send(peer_id = self.receiver, message = f'{name}, –∫—Ä—É—Ç–∏—Ç—Å—è –≤–µ—Ä—Ç–∏—Ç—Å—è —à–∞—Ä –≥–æ–ª—É–±–æ–π...')
                    else:
                        if ' –∏–ª–∏ ' in arg.lower():
                            between = arg.split(' –∏–ª–∏ ')
                            send(peer_id = self.receiver, message = f'{name}, –¥—É–º–∞—é {between[randint(0, len(between) - 1)]}')
                        elif arg.lower()[:5] == '–∫–æ–≥–¥–∞':
                            now = datetime.datetime.now()
                            def get_random_time():
                                type_ = ['—Å–µ–∫.', '–º–∏–Ω.', '—á.', '–¥.', '–º–µ—Å.', '–≥.']
                                type_ = type_[randint(0, 5)]
                                count = None
                                rset = ''
                                if type_ == '—Å–µ–∫.' or type_ == '–º–∏–Ω.':
                                    count = randint(1, 60)
                                elif type_ == '—á.':
                                    count = randint(1, 24)
                                elif type_ == '–¥.':
                                    count = randint(1, 31)
                                    rset = f' –≤ {randint(0,23)}:{randint(0,59)}'
                                elif type_ == '–º–µ—Å.':
                                    count = randint(1, 12)
                                    rset = f' –≤ {randint(0,23)}:{randint(0,5)}{randint(0,9)}'
                                elif type_ == '–≥.':
                                    count = randint(1, 10)
                                    rset = f' –≤ {randint(0,23)}:{randint(0,59)}'
                                    if count > 4:
                                        type_ = '–ª–µ—Ç'
                                return f'{count} {type_}{rset}'
                            send(peer_id = self.receiver, message = f'{name}, —á–µ—Ä–µ–∑ {get_random_time()}')
                        elif arg.lower()[:3] == '–∫—Ç–æ' or arg.lower()[:4] == '–∫–æ–≥–æ':
                            if self.id == self.receiver:
                                send(peer_id = self.receiver, message = f'{name}, –≤—ã–±–æ—Ä "–∫—Ç–æ/–∫–æ–≥–æ" —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö.')
                            else:
                                chat = vk.messages.getConversationMembers(peer_id = self.receiver)['profiles']
                                who = chat[randint(0, len(chat) - 1)]
                                who_id = who['id']
                                if 'first_name' in who:
                                    who_name = who['first_name']
                                    who = replace_nicknames(f'[id{who_id}|{who_name}]')
                                else:
                                    who_name = who['name']
                                    who = replace_nicknames(f'[club{who_id}|{who_name}]')
                                send(peer_id = self.receiver, message = f'{name}, –¥—É–º–∞—é —ç—Ç–æ {who}')
                        else:
                            answers = ['–¥–∞', '–Ω–µ—Ç']
                            send(peer_id = self.receiver, message = f'{name}, –¥—É–º–∞—é {answers[randint(0,1)]}')
                # <command> —Ñ—Ä–∞–∑–∞
                elif cmd.lower() == '—Ñ—Ä–∞–∑–∞':
                    dictionary = openjson('words.json')['list']
                    end = ['.', '!', '?']
                    if arg == None:
                        count = randint(1, 20)
                        phrase = ''
                        for i in range(count):
                            phrase += dictionary[randint(0, len(dictionary) - 1)] + ' '
                        phrase = phrase[:-1]
                        phrase = phrase[0].upper() + phrase[1:] + end[randint(0, 2)]
                        send(peer_id = self.receiver, message = phrase)
                    else:
                        if isint(arg):
                            if int(arg) > 50:
                                send(peer_id = self.receiver, message = f'{name}, –ª–∏–º–∏—Ç —Ñ—Ä–∞–∑ - 50.')
                            else:
                                count = int(arg)
                                phrase = ''
                                for i in range(count):
                                    phrase += dictionary[randint(0, len(dictionary) - 1)] + ' '
                                phrase = phrase[:-1]
                                phrase = phrase[0].upper() + phrase[1:] + end[randint(0, 2)]
                                send(peer_id = self.receiver, message = phrase)
                        else:
                            if len(arg.split(' ', 1)) > 1 and isint(arg.split(' ', 1)[0]) and not isint(arg.split(' ', 1)[1]):
                                phrase = ''
                                count = int(arg.split(' ', 1)[0])
                                includes = arg.split(' ', 1)[1]
                                for i in range(count):
                                    w = dictionary[randint(0, len(dictionary) - 1)]
                                    have = False
                                    for i in range(len(dictionary)):
                                        if includes in dictionary[i]:
                                            have = True
                                            break 
                                    if have:
                                        while includes not in w:
                                            w = dictionary[randint(0, len(dictionary) - 1)]
                                        phrase += w + ' '
                                phrase = phrase[:-1]
                                phrase = phrase[0].upper() + phrase[1:] + end[randint(0, 2)]
                                if phrase != '':
                                    send(peer_id = self.receiver, message = phrase)
                # <command> –ø—Ä–æ—Ñ–∏–ª—å
                elif cmd.lower() == '–ø—Ä–æ—Ñ–∏–ª—å':
                    nicknames = openjson('nicknames.json')
                    ratings = openjson('ratings.json')
                    mention = None
                    intro = '–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}'
                    if arg == None:
                        if not self.rep:
                            mention = name
                            mention_id = str(self.id)
                            intro = '–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å'
                        else:
                            mention_id = str(self.rep['from_id'])
                            mention = replace_nicknames(f'[id{mention_id}|user]')
                    else:
                        if len(mentions) > 0:
                            mention = mention[0]
                            mention_id = id_from_mention(mention)
                            if mention == name:
                                intro = '–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å'
                    nickname = nicknames[mention_id]
                    if mention_id not in ratings:
                        ratings[mention_id] = {"wins": 0, "rank": ["Starter –ù—å—é—Ñ–∞–≥", 1]}
                        rating = 0
                        battle_rank = 'Starter –ù—å—é—Ñ–∞–≥'
                        ranks_unlocked = 1
                    else:
                        rating = ratings[mention_id]['wins']
                        battle_rank = ratings[mention_id]['rank'][0]
                        ranks_unlocked = ratings[mention_id]['rank'][1]
                    wins_to_rank = 0
                    for i in range(1, len(ranks) + 1):
                        if i == ratings[mention_id]['rank'][1] + 1:
                            wins_to_rank = ranks[i - 1][1] - ratings[mention_id]['wins']
                    send(peer_id = self.receiver, message = f'{name}, —ç—Ç–æ {intro.format(mention)}:\n\n–ù–∏–∫–Ω–µ–π–º: {nickname}\n–ü–æ–±–µ–¥ –≤ –±–æ—è—Ö: {rating}\n–†–∞–Ω–≥ –≤ –±–æ—è—Ö: {battle_rank}({ranks_unlocked}/25, –ø–æ–±–µ–¥ –¥–æ –Ω–æ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞ - {wins_to_rank})')
                # <command> —Ç–æ–ø
                elif cmd.lower() == '—Ç–æ–ø':
                    ratings = openjson('ratings.json')
                    top = ''
                    for i in range(1, len(ratings) + 1 if len(ratings) <= 5 else 6):
                        max_ = 0
                        last_key = ''
                        for k, v in ratings.items():
                            if v['wins'] > max_:
                                max_ = v['wins']
                                last_key = k
                        del ratings[last_key]
                        nickname = replace_nicknames(f'[id{last_key}|user]')
                        top += f'{i} –º–µ—Å—Ç–æ: {nickname} - {max_}\n'
                    send(peer_id = self.receiver, message = f'{name}, —ç—Ç–æ —Ç–æ–ø –ø–æ–±–µ–¥:\n\n{top}')
                # <command> —Ä–ø
                elif cmd.lower() == '—Ä–ø':
                    if arg != None:
                        send(peer_id = self.receiver, message = f'{name} {arg}')
                # <command> —Å—Ç–∏—Ö
                elif cmd.lower() == '—Å—Ç–∏—Ö':
                    dictionary = openjson('words.json')['list']
                    phrase = ''
                    if arg == None:
                        count = randint(1, 20)
                    else:
                        if isint(arg):
                            if int(arg) > 8:
                                send(peer_id = self.receiver, message = f'{name}, –ª–∏–º–∏—Ç —Å—Ç—Ä–æ—Ñ - 8.')
                            else:
                                count = int(arg)
                    prev_end = ''
                    for i in range(1, count * 2 + 1):
                        stroke = ''
                        prev = ''
                        for j in range(1, 5):
                            w = dictionary[randint(0, len(dictionary) - 1)]
                            if len(prev) < 3:
                                while len(w) < 3:
                                    w = dictionary[randint(0, len(dictionary) - 1)]
                            if j == 4:
                                while len(w) < 3:
                                    w = dictionary[randint(0, len(dictionary) - 1)]
                                if i % 2 != 0:
                                    nice = False
                                    while not nice:
                                        for i in range(len(dictionary)):
                                            if dictionary[i][-3:] == w[-3:]:
                                                nice = True
                                        if not nice:
                                            while len(w) < 3:
                                                w = dictionary[randint(0, len(dictionary) - 1)]
                                else:
                                    while w[-3:] != prev_end[-3:]:
                                        w = dictionary[randint(0, len(dictionary) - 1)]
                                prev_end = w
                                print(prev_end)
                            stroke += w + ' '
                            prev = w
                        if i % 2 == 0:
                            phrase += stroke[0].upper() + stroke[1:-1] + '.\n'
                        else:
                            phrase += stroke[0].upper() + stroke[1:-1] + ',\n'
                    send(peer_id = self.receiver, message = phrase) 
            else:
                if '–∏–ª–∏' in msg_text.lower() and charcount(' ', msg_text.lower()) == 2:
                    between = msg.split(' –∏–ª–∏ ')
                    if between[1][-1] == '?' or between[1][-1] == '!' or between[1][-1] == '.':
                        send(peer_id = self.receiver, message = f'{name}, {between[randint(0,1)][:-1]}')
                    else:
                        send(peer_id = self.receiver, message = f'{name}, {between[randint(0,1)]}')
                elif has_in(self.catching[0], msg_text.lower()):
                    if self.sex == 2:
                        send(peer_id = self.receiver, message = f'–°–∞–º –∏–¥–∏ –Ω–∞—Ö—É–π, {name} üò°')
                    else:
                        send(peer_id = self.receiver, message = f'–°–∞–º–∞ –∏–¥–∏ –Ω–∞—Ö—É–π, {name} üò°')
                elif has_in(self.catching[1], msg_text.lower()):
                    send(peer_id = self.receiver, message = f'Sorry for what, {name}?')
                elif has_in(self.catching[2], msg_text.lower()):
                    if self.sex == 2:
                        send(peer_id = self.receiver, message = f'–°–∞–º —Å–æ—Å–∏, {name}üò°')
                    else:
                        send(peer_id = self.receiver, message = f'–°–∞–º–∞ —Å–æ—Å–∏, {name} üò°')
                elif has_in(self.catching[3], msg_text.lower()):
                    if self.sex == 2:
                        send(peer_id = self.receiver, message = f'–°–∞–º —Ç—ã –≥–µ–π, {name}üò°')
                    else:
                        send(peer_id = self.receiver, message = f'–°–∞–º–∞ —Ç—ã –≥–µ–π, {name} üò°')
            update_words(msg_text)
